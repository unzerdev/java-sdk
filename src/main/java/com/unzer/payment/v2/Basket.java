package com.unzer.payment.v2;

import com.unzer.payment.Resource;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Currency;

/**
 * Baskets are used for adding the additional information for the products that a customer is buying.
 * It gives a more transparent and clear picture regarding their shopping details.
 * Generally, a basket is optional, but some payment methods require such information for risk analysis,
 * and insurance, such as Unzer Direct Debit Secured and Unzer Invoice for instance.
 * <p>
 * See: <a href="https://docs.unzer.com/server-side-integration/java-sdk-integration/manage-java-resources/java-manage-basket/">Unzer Docs</a>
 */
public class Basket implements Resource {
    private String id;
    private Currency currencyCode;
    private String orderId;
    private BigDecimal totalValueGross;
    private String note;
    private Collection<BasketItem> basketItems;

    /**
     * Used only for serialization/deserialization. To create entity with values use Builder.
     */
    public Basket() {
    }

    public String getResourceUrl() {
        return "v2/baskets";
    }

    /**
     * Generated unique id
     */
    public String getId() {
        return id;
    }

    /**
     * Currency code in ISO_4217 format
     */
    public Currency getCurrencyCode() {
        return currencyCode;
    }

    /**
     * A basket or shop reference ID sent from the shop’s back end.
     * Must be equal to the orderID used for the authorization and/or charge trx belonging to the basket.
     * If not value is provided, an order ID is automatically generated by the Unzer system.
     */
    public String getOrderId() {
        return orderId;
    }

    /**
     * The total basket value (including VAT) of all basket items reduced/deducted by all discounts and vouchers.
     */
    public BigDecimal getTotalValueGross() {
        return totalValueGross;
    }

    /**
     * Additional details for the basket.
     */
    public String getNote() {
        return note;
    }

    /**
     * List of items in the basket
     */
    public Collection<BasketItem> getBasketItems() {
        return basketItems;
    }

    /**
     * Builder is used for building Basket objects
     */
    public static class Builder {
        private final Currency currencyCode;
        private final BigDecimal totalValueGross;
        private final Collection<BasketItem> basketItems;
        private String orderId;
        private String note;

        /**
         * Constructs Builder object. All parameters are mandatory.
         *
         * @param totalValueGross The total basket value (including VAT) of all basket items reduced/deducted by all discounts and vouchers.
         * @param currencyCode    Currency code in ISO_4217 format
         */
        public static Builder create(BigDecimal totalValueGross, Currency currencyCode) {
            return new Builder(totalValueGross, currencyCode);
        }

        private Builder(BigDecimal totalValueGross, Currency currencyCode) {
            this.totalValueGross = totalValueGross;
            this.currencyCode = currencyCode;
            this.basketItems = new ArrayList<>();
        }

        /**
         * A basket or shop reference ID sent from the shop’s back end.
         * Must be equal to the orderID used for the authorization and/or charge trx belonging to the basket.
         * If not value is provided, an order ID is automatically generated by the Unzer system.
         */
        public Builder orderId(String orderId) {
            this.orderId = orderId;
            return this;
        }

        /**
         * Additional details for the basket.
         */
        public Builder note(String note) {
            this.note = note;
            return this;
        }

        /**
         * Add item to list of basket items
         */
        public Builder basketItem(BasketItem item) {
            this.basketItems.add(item);
            return this;
        }

        /**
         * Add multiple items to list of basket items
         */
        public Builder basketItems(Collection<BasketItem> basketItems) {
            this.basketItems.addAll(basketItems);
            return this;
        }

        /**
         * Builds Basket object
         */
        public Basket build() {
            Basket basket = new Basket();
            basket.orderId = this.orderId;
            basket.currencyCode = this.currencyCode;
            basket.note = this.note;
            basket.totalValueGross = this.totalValueGross;
            basket.basketItems = this.basketItems;
            return basket;
        }
    }
}
